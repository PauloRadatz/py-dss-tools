# -*- coding: utf-8 -*-
# @Author  : Raphael Maccari
# @Email   : raphaelmaccari@gmail.com
# @File    : VTCDVulnerabilityArea.py
# @Software: PyCharm


import pandas as pd
from py_dss_interface import DSS
from py_dss_tools.dss_tools import DSSTools


class VTCDVunerabilityArea:

    def __init__(self, dss: DSS):
        self._dss = dss
        self.vmags_df = pd.DataFrame()


    def bus_vulnerability_sag_map_sc3ph(self, bus_analyzed, dss_file, v_1=0.1,v_2=0.2,v_3=0.3,v_4=0.4,v_5=0.5,v_6=0.6,v_7=0.7,v_8=0.8,v_9=0.9,v_10=0.95):
        self._bus_analyzed = bus_analyzed
        self._v_1 = v_1
        self._v_2 = v_2
        self._v_3 = v_3
        self._v_4 = v_4
        self._v_5 = v_5
        self._v_6 = v_6
        self._v_7 = v_7
        self._v_8 = v_8
        self._v_9 = v_9
        self._v_10 = v_10
        self.dss_file = dss_file

        vmags_df, _ = DSSTools(self._dss).results.circuit_vmag_vang_dfs()

        for bus in self._dss.circuit.buses_names:

            self._dss.text(f"Compile [{self.dss_file}]")
            self._dss.text("batchedit regcontrol..* enabled=No")
            self._dss.text("batchedit load..* enabled=No")
            self._dss.text(f"Buscoords Buscoords.dat")

            self._dss.circuit.set_active_bus(bus)
            if len(self._dss.bus.nodes) >= 3 and self._dss.bus.x:
                self._dss.text(f"new fault.3_ph_{bus} phases=3 bus1={bus} bus2={bus}.4.4.4")
                self._dss.text("solve")
                vmags_df_temp, _ = DSSTools(self._dss).results.circuit_vmag_vang_dfs()
                vmags_df_temp = vmags_df_temp.iloc[:, :-1]  #Descarta a última coluna.
                vmags_df.loc[bus] = vmags_df_temp.loc[self._bus_analyzed].values

            else:
                self._dss.text(f"new fault.1_ph_{bus} phases=1 bus1={bus}.1 bus2={bus}.0")
                self._dss.text("solve")
                vmags_df_temp, _ = DSSTools(self._dss).results.circuit_vmag_vang_dfs()
                vmags_df.loc[bus] = vmags_df_temp.loc[self._bus_analyzed].values

        vmags_df['vmin'] = vmags_df.min(axis=1)  #Gera uma coluna no df com nome vmin e armazena o mínimo das 3 anteriores.

        colors = []
        for v_min in vmags_df['vmin']:
            if v_min <= v_1:
                colors.append("black")
            elif v_min <= v_2:
                colors.append("maroon")
            elif v_min <= v_3:
                colors.append("purple")
            elif v_min <= v_4:
                colors.append("navy")  # fuchsia
            elif v_min <= v_5:
                colors.append("teal")
            elif v_min <= v_6:
                colors.append("blue")
            elif v_min <= v_7:
                colors.append("aqua")
            elif v_min <= v_8:
                colors.append("yellow")
            elif v_min <= v_9:
                colors.append("lime")
            elif v_min < v_10:
                colors.append("olive")
            else:
                colors.append("green")

        vmags_df['colors'] = colors
        self.vmags_df = vmags_df

        return vmags_df

    def bus_vulnerability_sag_swell_map_sc1ph(self, bus_analyzed, dss_file, vsag_1=0.1,vsag_2=0.2,vsag_3=0.3,vsag_4=0.4,
                                              vsag_5=0.5,vsag_6=0.6,vsag_7=0.7,vsag_8=0.8,vsag_9=0.9,vsag_10=0.95,
                                              vswell_1=1.05,vswell_2=1.06, vswell_3=1.1):

        self._bus_analyzed = bus_analyzed
        self._vsag_1 = vsag_1
        self._vsag_2 = vsag_2
        self._vsag_3 = vsag_3
        self._vsag_4 = vsag_4
        self._vsag_5 = vsag_5
        self._vsag_6 = vsag_6
        self._vsag_7 = vsag_7
        self._vsag_8 = vsag_8
        self._vsag_9 = vsag_9
        self._vsag_10 = vsag_10
        self._vswell_1 = vswell_1
        self._vswell_2 = vswell_2
        self._vswell_3 = vswell_3
        self.dss_file = dss_file

        vmags_df, _ = DSSTools(self._dss).results.circuit_vmag_vang_dfs()

        for bus in self._dss.circuit.buses_names:

            self._dss.text(f"Compile [{self.dss_file}]")
            self._dss.text("batchedit regcontrol..* enabled=No")
            self._dss.text("batchedit load..* enabled=No")
            self._dss.text(f"Buscoords Buscoords.dat")

            self._dss.text(f"new fault.1_ph_{bus} phases=1 bus1={bus}.1 bus2={bus}.0")
            self._dss.text("solve")
            vmags_df_temp, _ = DSSTools(self._dss).results.circuit_vmag_vang_dfs()
            vmags_df.loc[bus] = vmags_df_temp.loc[self._bus_analyzed].values

        vmags_df['vmin'] = vmags_df.min(axis=1)  # Gera uma coluna no df com nome vmin e armazena o mínimo das 3 anteriores.
        vmags_df['vmax'] = vmags_df.iloc[:, :-1].max(axis=1)  # Cria uma coluna adicional e faz o máximo das 3 primeiras

        colors_sag = []
        for v_min in vmags_df['vmin']:
            if v_min <= vsag_1:
                colors_sag.append("black")
            elif v_min <= vsag_2:
                colors_sag.append("maroon")
            elif v_min <= vsag_3:
                colors_sag.append("purple")
            elif v_min <= vsag_4:
                colors_sag.append("navy")
            elif v_min <= vsag_5:
                colors_sag.append("teal")
            elif v_min <= vsag_6:
                colors_sag.append("blue")
            elif v_min <= vsag_7:
                colors_sag.append("aqua")
            elif v_min <= vsag_8:
                colors_sag.append("yellow")
            elif v_min <= vsag_9:
                colors_sag.append("lime")
            elif v_min < vsag_10:
                colors_sag.append("olive")
            else:
                colors_sag.append("green")

        vmags_df['colors_sag'] = colors_sag

        colors_swell = []
        for v_max in vmags_df['vmax']:
            if v_max <= vswell_1:
                colors_swell.append("green")
            elif v_max <= vswell_2:
                colors_swell.append("yellow")
            elif v_max <= vswell_3:
                colors_swell.append("red")
            else:
                colors_swell.append("black")

        vmags_df['colors_swell'] = colors_swell

        self.vmags_df = vmags_df

        return vmags_df
